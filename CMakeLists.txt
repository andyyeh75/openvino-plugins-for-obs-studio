# Copyright (C) 2022-2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

cmake_minimum_required(VERSION 3.10)

# Multi config generators such as Visual Studio ignore CMAKE_BUILD_TYPE. Multi config generators are configured with
# CMAKE_CONFIGURATION_TYPES, but limiting options in it completely removes such build options
get_property(GENERATOR_IS_MULTI_CONFIG_VAR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(NOT GENERATOR_IS_MULTI_CONFIG_VAR AND NOT DEFINED CMAKE_BUILD_TYPE)
    message(STATUS "CMAKE_BUILD_TYPE not defined, 'Release' will be used")
    # Setting CMAKE_BUILD_TYPE as CACHE must go before project(). Otherwise project() sets its value and set() doesn't take an effect
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...")
endif()

project(obs-ai-plugins)


option(ENABLE_ITT "Whether to enable support for ITT tracing with VTune" OFF)

#whether ITT is enabled or not, include ittutils.
# This allows the project source files to unconditionally include <ittutils.h>
# That header file will implement the preprocessor logic to *actually* enable ITT or not.
include_directories( common/ittutils )

#If ITT is enabled, use VTune environment variables to find required headers / libraries.
# Worst case, we silently fail here, and ITT won't be enabled in the build.
if( ENABLE_ITT )
    if( DEFINED ENV{VTUNE_PROFILER_DIR} )
       file(TO_NATIVE_PATH $ENV{VTUNE_PROFILER_DIR} VTUNE_PROFILER_DIR)
	   find_path(ITT_INCLUDE_DIR 
	             NAME ittnotify.h
				 HINTS ${VTUNE_PROFILER_DIR}/sdk/include
				 DOC "ITT include directory"
				 )
				 
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		    set(VTUNE_SDK_LIBDIR ${VTUNE_PROFILER_DIR}/sdk/lib64)
		else()
		    set(VTUNE_SDK_LIBDIR ${VTUNE_PROFILER_DIR}/sdk/lib32)
		endif()
		
	    find_library(ITTNOTIFY_LIB
		             NAMES ittnotify libittnotify
					 HINTS ${VTUNE_SDK_LIBDIR}
					 DOC "ITTNOTIFY library"
					 )
					 
		if( ITT_INCLUDE_DIR AND ITTNOTIFY_LIB  )
		    set( ITT_LIBS ${ITTNOTIFY_LIB})
		    include_directories( ${ITT_INCLUDE_DIR})
			add_definitions(-DITT_ENABLED)
		else()
		    message("ITT Include directies and libraries NOT found. ITT will be disabled.")
		endif()
    else()
        message( "VTUNE_PROFILER_DIR is not set. ITT will be disabled.")
    endif()
endif()


if(NOT BIN_FOLDER)
    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} ARCH)
    if(ARCH STREQUAL "x86_64" OR ARCH STREQUAL "amd64") # Windows detects Intel's 64-bit CPU as AMD64
        set(ARCH intel64)
    elseif(ARCH STREQUAL "i386")
        set(ARCH ia32)
    endif()

    set(BIN_FOLDER ${ARCH})
endif()

foreach(artifact IN ITEMS ARCHIVE COMPILE_PDB LIBRARY PDB RUNTIME)
    set("CMAKE_${artifact}_OUTPUT_DIRECTORY" "${CMAKE_CURRENT_BINARY_DIR}/${BIN_FOLDER}/$<CONFIG>")
endforeach()

if(UNIX)
    string(APPEND CMAKE_LIBRARY_OUTPUT_DIRECTORY "/lib")
    string(APPEND CMAKE_ARCHIVE_OUTPUT_DIRECTORY "/lib")
endif()

if(WIN32)
    if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
        message(FATAL_ERROR "Only 64-bit supported on Windows")
    endif()
endif()

if(MSVC)
    add_compile_options(/wd4251 /wd4275 /wd4267  # disable some warnings
                        /W3  # Specify the level of warnings to be generated by the compiler
                        /EHsc  # Enable standard C++ stack unwinding, assume functions with extern "C" never throw
                        /GS  # Security checks  
						)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "^GNU|(Apple)?Clang$")
    set(COMPILER_IS_GCC_LIKE TRUE)
    add_compile_options(-Wall -Wformat -Wformat-security -Werror=format-security 
	                    -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fPIE 
						-fPIC -shared -z,relro -z,now -z noexecstack 
						-fno-strict-overflow -fno-delete-null-pointer-checks -fwrapv)
    add_link_options( -pie )
else()
    set(COMPILER_IS_GCC_LIKE FALSE)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

include(CMakeParseArguments)

find_package(OpenCV REQUIRED COMPONENTS core highgui imgproc )
find_package(OpenVINO REQUIRED COMPONENTS Runtime)

add_subdirectory(ovmediapipe)
add_subdirectory(obs_plugins)

